server { # here is virtual the server context, this is called a "block directive"
	# the server_name is the component used to select a server block for processing:
	# Nginx will parse the 'host' header of the request and match it against the server_name directive
	server_name localhost; # FIXME
	# server_name DOMAIN_NAME; # an underscore here would create a catch-all the server
	# disables emitting nginx version on error pages & in the 'Server' response header field
	server_tokens off;

	# sets the IP address & port on which the server will accept requests
	listen 443 ssl;
	# same but for IPv6 addresses
	listen [::]:443 ssl;
	# note that the ssl directive was made obsolete in version 1.15

	# the SSL connection is established before the browser sends an HTTP request
	# certificate in the PEM format
	# it's a public entity sent to every client that connects to the server
	ssl_certificate			/etc/ssl/nginx/DOMAIN_NAME.pem;
	# secret key in the PEM format
	# it's a secure entity and should be store in a file with restricted access
	ssl_certificate_key		/etc/ssl/nginx/DOMAIN_NAME.key;
	# limits connections to include only the strong versions and ciphers of SSL/TLS
	ssl_protocols			TLSv1.2 TLSv1.3;

	# sets the root directory for requests: in response to /element, root/element is sent
	root /var/www/html;
	# defines files that will be used as an index (checked in the specified order)
	index index.php;

	# sets the path, format and configuration for a buffered log write
	access_log /var/log/nginx/access.log; # the format isn't specified, the predefined "combined" will be used
	error_log /var/log/nginx/error.log;

	# while server contexts are selected based on the requested IP address/port and the 'host' header,
	# "location contexts" respond to requests for resources inside the server
	# they further divide up the request handling by looking at the request URI
	# requests are always fulfilled with the most specific match possible
	# location blocks can be nested inside one another
	location ~ \.php$ { # regex matching
		# the $uri variable is set to the URI that nginx is currently processing
		# try_files checks the existen of files and uses the first found file for request processing
		# here, it checks the existence of the PHP file before passing the request to the FastCGI server
		# then falls back to displaying a 404 if nothing is found
		try_files $uri $uri/ =404;
		# sets the address of a FastCGI server, passes the PHP scripts to FastCGI server listening on wordpress:9000
		# FastCGI is a separate protocol that cannot read http headers
		fastcgi_pass wordpress:9000;
		# sets a file name that will be appended after a URI that ends with a slash
		fastcgi_index index.php;
		# defines a regex that captures a value for the $fastcgi_path_info variable
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# includes parameters listed in the fastcgi_params file, using fastcgi_param
		include fastcgi_params;
		# fastcgi_param sets another parameter that should be passed to the FastCGI server
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	}
	# denies all incoming requests for any files starting with .ht in the root directory
	location ~ /\.ht {
		deny all;
	}
	# the '=' modifier will exactly match the requested path and stop searching for better matches
	location = /favicon.ico {
		log_not_found off;
	}
	location = /robots.txt {
		log_not_found off;
		allow all; # allows limiting access to certain client addresses
	}
}
